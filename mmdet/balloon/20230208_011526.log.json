{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='open-mmlab://detectron2/resnet50_caffe')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                   (1333, 768), (1333, 800)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/train/annotation_coco.json',\n        img_prefix='data/balloon/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                poly2mask=False),\n            dict(\n                type='Resize',\n                img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                           (1333, 768), (1333, 800)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val/annotation_coco.json',\n        img_prefix='data/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val/annotation_coco.json',\n        img_prefix='data/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('balloon', )\nwork_dir = './work_dirs/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_balloon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1420966151, "exp_name": "mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.4441, "bbox_mAP_50": 0.6653, "bbox_mAP_75": 0.499, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.2488, "bbox_mAP_l": 0.5489, "bbox_mAP_copypaste": "0.4441 0.6653 0.4990 0.0000 0.2488 0.5489", "segm_mAP": 0.5171, "segm_mAP_50": 0.6579, "segm_mAP_75": 0.6044, "segm_mAP_s": 0.0, "segm_mAP_m": 0.185, "segm_mAP_l": 0.6328, "segm_mAP_copypaste": "0.5171 0.6579 0.6044 0.0000 0.1850 0.6328"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00246, "bbox_mAP": 0.6496, "bbox_mAP_50": 0.8206, "bbox_mAP_75": 0.7686, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4429, "bbox_mAP_l": 0.7354, "bbox_mAP_copypaste": "0.6496 0.8206 0.7686 0.0000 0.4429 0.7354", "segm_mAP": 0.6986, "segm_mAP_50": 0.8156, "segm_mAP_75": 0.8012, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4605, "segm_mAP_l": 0.7918, "segm_mAP_copypaste": "0.6986 0.8156 0.8012 0.0000 0.4605 0.7918"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0037, "bbox_mAP": 0.7101, "bbox_mAP_50": 0.8681, "bbox_mAP_75": 0.8068, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6238, "bbox_mAP_l": 0.7844, "bbox_mAP_copypaste": "0.7101 0.8681 0.8068 0.0000 0.6238 0.7844", "segm_mAP": 0.7567, "segm_mAP_50": 0.8495, "segm_mAP_75": 0.8295, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6527, "segm_mAP_l": 0.8347, "segm_mAP_copypaste": "0.7567 0.8495 0.8295 0.0000 0.6527 0.8347"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00494, "bbox_mAP": 0.6856, "bbox_mAP_50": 0.8591, "bbox_mAP_75": 0.8397, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5141, "bbox_mAP_l": 0.7744, "bbox_mAP_copypaste": "0.6856 0.8591 0.8397 0.0000 0.5141 0.7744", "segm_mAP": 0.7626, "segm_mAP_50": 0.8591, "segm_mAP_75": 0.7937, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6387, "segm_mAP_l": 0.8406, "segm_mAP_copypaste": "0.7626 0.8591 0.7937 0.0000 0.6387 0.8406"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00617, "bbox_mAP": 0.741, "bbox_mAP_50": 0.8877, "bbox_mAP_75": 0.8738, "bbox_mAP_s": 0.303, "bbox_mAP_m": 0.6177, "bbox_mAP_l": 0.8126, "bbox_mAP_copypaste": "0.7410 0.8877 0.8738 0.3030 0.6177 0.8126", "segm_mAP": 0.7884, "segm_mAP_50": 0.8877, "segm_mAP_75": 0.8525, "segm_mAP_s": 0.3535, "segm_mAP_m": 0.6817, "segm_mAP_l": 0.8601, "segm_mAP_copypaste": "0.7884 0.8877 0.8525 0.3535 0.6817 0.8601"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00741, "bbox_mAP": 0.7274, "bbox_mAP_50": 0.833, "bbox_mAP_75": 0.8172, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6405, "bbox_mAP_l": 0.7903, "bbox_mAP_copypaste": "0.7274 0.8330 0.8172 0.0000 0.6405 0.7903", "segm_mAP": 0.738, "segm_mAP_50": 0.8133, "segm_mAP_75": 0.7902, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6351, "segm_mAP_l": 0.8124, "segm_mAP_copypaste": "0.7380 0.8133 0.7902 0.0000 0.6351 0.8124"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00865, "bbox_mAP": 0.6982, "bbox_mAP_50": 0.8746, "bbox_mAP_75": 0.8331, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.5535, "bbox_mAP_l": 0.7715, "bbox_mAP_copypaste": "0.6982 0.8746 0.8331 0.1010 0.5535 0.7715", "segm_mAP": 0.7592, "segm_mAP_50": 0.8746, "segm_mAP_75": 0.8309, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.6039, "segm_mAP_l": 0.8528, "segm_mAP_copypaste": "0.7592 0.8746 0.8309 0.0505 0.6039 0.8528"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00989, "bbox_mAP": 0.6486, "bbox_mAP_50": 0.7503, "bbox_mAP_75": 0.7503, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.3071, "bbox_mAP_l": 0.793, "bbox_mAP_copypaste": "0.6486 0.7503 0.7503 0.0000 0.3071 0.7930", "segm_mAP": 0.6876, "segm_mAP_50": 0.7503, "segm_mAP_75": 0.7503, "segm_mAP_s": 0.0, "segm_mAP_m": 0.3036, "segm_mAP_l": 0.8433, "segm_mAP_copypaste": "0.6876 0.7503 0.7503 0.0000 0.3036 0.8433"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00111, "bbox_mAP": 0.7472, "bbox_mAP_50": 0.8506, "bbox_mAP_75": 0.8119, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5855, "bbox_mAP_l": 0.8388, "bbox_mAP_copypaste": "0.7472 0.8506 0.8119 0.0000 0.5855 0.8388", "segm_mAP": 0.7845, "segm_mAP_50": 0.8506, "segm_mAP_75": 0.8506, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6057, "segm_mAP_l": 0.8802, "segm_mAP_copypaste": "0.7845 0.8506 0.8506 0.0000 0.6057 0.8802"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.7573, "bbox_mAP_50": 0.8587, "bbox_mAP_75": 0.8325, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5802, "bbox_mAP_l": 0.8505, "bbox_mAP_copypaste": "0.7573 0.8587 0.8325 0.0000 0.5802 0.8505", "segm_mAP": 0.7884, "segm_mAP_50": 0.8587, "segm_mAP_75": 0.8587, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6045, "segm_mAP_l": 0.8884, "segm_mAP_copypaste": "0.7884 0.8587 0.8587 0.0000 0.6045 0.8884"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00136, "bbox_mAP": 0.7402, "bbox_mAP_50": 0.8621, "bbox_mAP_75": 0.8468, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6102, "bbox_mAP_l": 0.8213, "bbox_mAP_copypaste": "0.7402 0.8621 0.8468 0.0000 0.6102 0.8213", "segm_mAP": 0.7874, "segm_mAP_50": 0.8621, "segm_mAP_75": 0.8621, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6478, "segm_mAP_l": 0.8759, "segm_mAP_copypaste": "0.7874 0.8621 0.8621 0.0000 0.6478 0.8759"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.7589, "bbox_mAP_50": 0.8677, "bbox_mAP_75": 0.8523, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6052, "bbox_mAP_l": 0.8465, "bbox_mAP_copypaste": "0.7589 0.8677 0.8523 0.0000 0.6052 0.8465", "segm_mAP": 0.8008, "segm_mAP_50": 0.8677, "segm_mAP_75": 0.8677, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6551, "segm_mAP_l": 0.8879, "segm_mAP_copypaste": "0.8008 0.8677 0.8677 0.0000 0.6551 0.8879"}
