{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.6.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.30.0+8ea3ea3", "seed": 1101543082, "exp_name": "pspnet_r50-d8_512x512_2k_glomeruli.py", "mmseg_version": "0.30.0+8ea3ea3", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CustomDataset'\ndata_root = 'data/glomeruli'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='CustomDataset',\n        data_root='data/glomeruli',\n        img_dir='images',\n        ann_dir='masks',\n        split='splits/train.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ],\n        img_suffix='.png',\n        classes=('background', 'glomeruli'),\n        palette=[[128, 128, 128], [151, 189, 8]]),\n    val=dict(\n        type='CustomDataset',\n        data_root='data/glomeruli',\n        img_dir='images',\n        ann_dir='masks',\n        split='splits/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        img_suffix='.png',\n        classes=('background', 'glomeruli'),\n        palette=[[128, 128, 128], [151, 189, 8]]),\n    test=dict(\n        type='CustomDataset',\n        data_root='data/glomeruli',\n        img_dir='images',\n        ann_dir='masks',\n        split='splits/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        img_suffix='.png',\n        classes=('background', 'glomeruli'),\n        palette=[[128, 128, 128], [151, 189, 8]]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth'\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=200)\nevaluation = dict(interval=200, metric='mIoU', pre_eval=True)\nimg_dir = 'images'\nann_dir = 'masks'\nclasses = ('background', 'glomeruli')\npalette = [[128, 128, 128], [151, 189, 8]]\nsuffix = '.png'\nwork_dir = './work_dirs/pspnet_r50-d8_512x512_2k_glomeruli'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 1101543082\n", "CLASSES": ["background", "glomeruli"], "PALETTE": [[128, 128, 128], [151, 189, 8]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00489, "memory": 18259, "data_time": 0.01627, "decode.loss_ce": 0.16173, "decode.acc_seg": 94.28376, "aux.loss_ce": 0.08396, "aux.acc_seg": 95.87391, "loss": 0.24569, "time": 0.64064}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00478, "memory": 18259, "data_time": 0.0052, "decode.loss_ce": 0.0681, "decode.acc_seg": 98.06725, "aux.loss_ce": 0.03022, "aux.acc_seg": 98.06725, "loss": 0.09832, "time": 0.51279}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00467, "memory": 18259, "data_time": 0.00518, "decode.loss_ce": 0.03965, "decode.acc_seg": 98.58022, "aux.loss_ce": 0.02089, "aux.acc_seg": 98.58022, "loss": 0.06055, "time": 0.51467}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00456, "memory": 18259, "data_time": 0.00514, "decode.loss_ce": 0.0412, "decode.acc_seg": 98.1435, "aux.loss_ce": 0.02192, "aux.acc_seg": 98.1435, "loss": 0.06312, "time": 0.52738}
{"mode": "val", "epoch": 1, "iter": 515, "lr": 0.00456, "aAcc": 0.981, "mIoU": 0.4905, "mAcc": 0.5, "IoU.background": 0.981, "IoU.glomeruli": 0.0, "Acc.background": 1.0, "Acc.glomeruli": 0.0}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00445, "memory": 18259, "data_time": 0.51208, "decode.loss_ce": 0.03763, "decode.acc_seg": 98.13662, "aux.loss_ce": 0.02023, "aux.acc_seg": 98.13651, "loss": 0.05786, "time": 1.02385}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00434, "memory": 18259, "data_time": 0.0552, "decode.loss_ce": 0.02943, "decode.acc_seg": 98.50563, "aux.loss_ce": 0.01492, "aux.acc_seg": 98.50578, "loss": 0.04435, "time": 0.56619}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00422, "memory": 18259, "data_time": 0.00512, "decode.loss_ce": 0.0321, "decode.acc_seg": 98.16027, "aux.loss_ce": 0.01729, "aux.acc_seg": 97.99733, "loss": 0.04939, "time": 0.51713}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00411, "memory": 18259, "data_time": 0.00525, "decode.loss_ce": 0.03144, "decode.acc_seg": 98.57664, "aux.loss_ce": 0.01565, "aux.acc_seg": 98.24145, "loss": 0.0471, "time": 0.52857}
{"mode": "val", "epoch": 2, "iter": 515, "lr": 0.00411, "aAcc": 0.9881, "mIoU": 0.6839, "mAcc": 0.6924, "IoU.background": 0.988, "IoU.glomeruli": 0.3798, "Acc.background": 0.9997, "Acc.glomeruli": 0.3851}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.004, "memory": 18259, "data_time": 0.47352, "decode.loss_ce": 0.03533, "decode.acc_seg": 98.53625, "aux.loss_ce": 0.01962, "aux.acc_seg": 97.41825, "loss": 0.05494, "time": 0.98553}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00388, "memory": 18259, "data_time": 0.00521, "decode.loss_ce": 0.03677, "decode.acc_seg": 98.6677, "aux.loss_ce": 0.01849, "aux.acc_seg": 97.93355, "loss": 0.05526, "time": 0.51745}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00377, "memory": 18259, "data_time": 0.0555, "decode.loss_ce": 0.02327, "decode.acc_seg": 99.0941, "aux.loss_ce": 0.01404, "aux.acc_seg": 98.05245, "loss": 0.03731, "time": 0.56667}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.00366, "memory": 18259, "data_time": 0.00514, "decode.loss_ce": 0.02659, "decode.acc_seg": 98.91769, "aux.loss_ce": 0.01567, "aux.acc_seg": 97.60227, "loss": 0.04226, "time": 0.53002}
{"mode": "val", "epoch": 3, "iter": 515, "lr": 0.00366, "aAcc": 0.9936, "mIoU": 0.8491, "mAcc": 0.9025, "IoU.background": 0.9935, "IoU.glomeruli": 0.7047, "Acc.background": 0.9972, "Acc.glomeruli": 0.8078}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.00354, "memory": 18259, "data_time": 0.46886, "decode.loss_ce": 0.01685, "decode.acc_seg": 99.3463, "aux.loss_ce": 0.01035, "aux.acc_seg": 98.66821, "loss": 0.0272, "time": 0.98057}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.00343, "memory": 18259, "data_time": 0.0052, "decode.loss_ce": 0.02933, "decode.acc_seg": 98.7492, "aux.loss_ce": 0.01592, "aux.acc_seg": 97.56374, "loss": 0.04525, "time": 0.51752}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.00331, "memory": 18259, "data_time": 0.00529, "decode.loss_ce": 0.02211, "decode.acc_seg": 99.12923, "aux.loss_ce": 0.01302, "aux.acc_seg": 98.34598, "loss": 0.03513, "time": 0.51784}
{"mode": "train", "epoch": 4, "iter": 800, "lr": 0.0032, "memory": 18259, "data_time": 0.05538, "decode.loss_ce": 0.01861, "decode.acc_seg": 99.34877, "aux.loss_ce": 0.01127, "aux.acc_seg": 98.64033, "loss": 0.02988, "time": 0.57842}
{"mode": "val", "epoch": 4, "iter": 515, "lr": 0.0032, "aAcc": 0.993, "mIoU": 0.823, "mAcc": 0.8453, "IoU.background": 0.9929, "IoU.glomeruli": 0.653, "Acc.background": 0.9988, "Acc.glomeruli": 0.6918}
{"mode": "train", "epoch": 4, "iter": 850, "lr": 0.00308, "memory": 18259, "data_time": 0.46863, "decode.loss_ce": 0.0193, "decode.acc_seg": 99.28619, "aux.loss_ce": 0.0118, "aux.acc_seg": 98.75442, "loss": 0.0311, "time": 0.98062}
{"mode": "train", "epoch": 4, "iter": 900, "lr": 0.00296, "memory": 18259, "data_time": 0.00526, "decode.loss_ce": 0.02359, "decode.acc_seg": 99.12023, "aux.loss_ce": 0.01269, "aux.acc_seg": 98.88379, "loss": 0.03628, "time": 0.51758}
{"mode": "train", "epoch": 4, "iter": 950, "lr": 0.00285, "memory": 18259, "data_time": 0.00524, "decode.loss_ce": 0.0187, "decode.acc_seg": 99.28188, "aux.loss_ce": 0.01066, "aux.acc_seg": 99.05664, "loss": 0.02936, "time": 0.51764}
{"mode": "train", "epoch": 4, "iter": 1000, "lr": 0.00273, "memory": 18259, "data_time": 0.00525, "decode.loss_ce": 0.01428, "decode.acc_seg": 99.45136, "aux.loss_ce": 0.00877, "aux.acc_seg": 99.22713, "loss": 0.02305, "time": 0.52893}
{"mode": "val", "epoch": 4, "iter": 515, "lr": 0.00273, "aAcc": 0.9947, "mIoU": 0.8689, "mAcc": 0.9031, "IoU.background": 0.9946, "IoU.glomeruli": 0.7432, "Acc.background": 0.9983, "Acc.glomeruli": 0.8079}
{"mode": "train", "epoch": 5, "iter": 1050, "lr": 0.00261, "memory": 18259, "data_time": 0.52197, "decode.loss_ce": 0.02188, "decode.acc_seg": 99.13763, "aux.loss_ce": 0.01351, "aux.acc_seg": 98.59528, "loss": 0.03539, "time": 1.03312}
{"mode": "train", "epoch": 5, "iter": 1100, "lr": 0.00249, "memory": 18259, "data_time": 0.00533, "decode.loss_ce": 0.02017, "decode.acc_seg": 99.16539, "aux.loss_ce": 0.01202, "aux.acc_seg": 98.92582, "loss": 0.0322, "time": 0.51735}
{"mode": "train", "epoch": 5, "iter": 1150, "lr": 0.00237, "memory": 18259, "data_time": 0.00543, "decode.loss_ce": 0.01937, "decode.acc_seg": 99.18682, "aux.loss_ce": 0.01222, "aux.acc_seg": 98.86959, "loss": 0.03159, "time": 0.51761}
{"mode": "train", "epoch": 5, "iter": 1200, "lr": 0.00225, "memory": 18259, "data_time": 0.00537, "decode.loss_ce": 0.01615, "decode.acc_seg": 99.4014, "aux.loss_ce": 0.00992, "aux.acc_seg": 99.11647, "loss": 0.02608, "time": 0.52865}
{"mode": "val", "epoch": 5, "iter": 515, "lr": 0.00225, "aAcc": 0.995, "mIoU": 0.88, "mAcc": 0.925, "IoU.background": 0.9949, "IoU.glomeruli": 0.765, "Acc.background": 0.9978, "Acc.glomeruli": 0.8522}
{"mode": "train", "epoch": 5, "iter": 1250, "lr": 0.00213, "memory": 18259, "data_time": 0.46986, "decode.loss_ce": 0.01616, "decode.acc_seg": 99.46532, "aux.loss_ce": 0.01065, "aux.acc_seg": 99.07982, "loss": 0.02681, "time": 0.98148}
{"mode": "train", "epoch": 6, "iter": 1300, "lr": 0.00201, "memory": 18259, "data_time": 0.05502, "decode.loss_ce": 0.01861, "decode.acc_seg": 99.32094, "aux.loss_ce": 0.01113, "aux.acc_seg": 99.01162, "loss": 0.02973, "time": 0.56607}
{"mode": "train", "epoch": 6, "iter": 1350, "lr": 0.00188, "memory": 18259, "data_time": 0.00519, "decode.loss_ce": 0.01719, "decode.acc_seg": 99.3954, "aux.loss_ce": 0.0093, "aux.acc_seg": 99.22125, "loss": 0.02649, "time": 0.51734}
{"mode": "train", "epoch": 6, "iter": 1400, "lr": 0.00176, "memory": 18259, "data_time": 0.00519, "decode.loss_ce": 0.01408, "decode.acc_seg": 99.51844, "aux.loss_ce": 0.00917, "aux.acc_seg": 99.17587, "loss": 0.02325, "time": 0.52843}
{"mode": "val", "epoch": 6, "iter": 515, "lr": 0.00176, "aAcc": 0.9952, "mIoU": 0.8853, "mAcc": 0.9381, "IoU.background": 0.9951, "IoU.glomeruli": 0.7754, "Acc.background": 0.9974, "Acc.glomeruli": 0.8788}
{"mode": "train", "epoch": 6, "iter": 1450, "lr": 0.00164, "memory": 18259, "data_time": 0.46848, "decode.loss_ce": 0.01006, "decode.acc_seg": 99.69629, "aux.loss_ce": 0.00747, "aux.acc_seg": 99.3944, "loss": 0.01753, "time": 0.98039}
{"mode": "train", "epoch": 6, "iter": 1500, "lr": 0.00151, "memory": 18259, "data_time": 0.00523, "decode.loss_ce": 0.01313, "decode.acc_seg": 99.57817, "aux.loss_ce": 0.00873, "aux.acc_seg": 99.33447, "loss": 0.02187, "time": 0.51741}
{"mode": "train", "epoch": 7, "iter": 1550, "lr": 0.00138, "memory": 18259, "data_time": 0.05573, "decode.loss_ce": 0.01298, "decode.acc_seg": 99.48123, "aux.loss_ce": 0.00835, "aux.acc_seg": 99.28499, "loss": 0.02133, "time": 0.56756}
{"mode": "train", "epoch": 7, "iter": 1600, "lr": 0.00125, "memory": 18259, "data_time": 0.00526, "decode.loss_ce": 0.01261, "decode.acc_seg": 99.55566, "aux.loss_ce": 0.00917, "aux.acc_seg": 99.2519, "loss": 0.02178, "time": 0.52881}
{"mode": "val", "epoch": 7, "iter": 515, "lr": 0.00125, "aAcc": 0.995, "mIoU": 0.8858, "mAcc": 0.9549, "IoU.background": 0.9949, "IoU.glomeruli": 0.7766, "Acc.background": 0.9966, "Acc.glomeruli": 0.9133}
{"mode": "train", "epoch": 7, "iter": 1650, "lr": 0.00112, "memory": 18259, "data_time": 0.46853, "decode.loss_ce": 0.01002, "decode.acc_seg": 99.66689, "aux.loss_ce": 0.00739, "aux.acc_seg": 99.36953, "loss": 0.01742, "time": 0.98029}
{"mode": "train", "epoch": 7, "iter": 1700, "lr": 0.00099, "memory": 18259, "data_time": 0.00549, "decode.loss_ce": 0.01548, "decode.acc_seg": 99.38158, "aux.loss_ce": 0.01003, "aux.acc_seg": 99.08827, "loss": 0.02552, "time": 0.5177}
{"mode": "train", "epoch": 7, "iter": 1750, "lr": 0.00086, "memory": 18259, "data_time": 0.00554, "decode.loss_ce": 0.01115, "decode.acc_seg": 99.61225, "aux.loss_ce": 0.0085, "aux.acc_seg": 99.29345, "loss": 0.01965, "time": 0.51774}
{"mode": "train", "epoch": 7, "iter": 1800, "lr": 0.00072, "memory": 18259, "data_time": 0.05508, "decode.loss_ce": 0.01009, "decode.acc_seg": 99.65976, "aux.loss_ce": 0.00713, "aux.acc_seg": 99.41264, "loss": 0.01722, "time": 0.57834}
{"mode": "val", "epoch": 7, "iter": 515, "lr": 0.00072, "aAcc": 0.9954, "mIoU": 0.8894, "mAcc": 0.9379, "IoU.background": 0.9953, "IoU.glomeruli": 0.7835, "Acc.background": 0.9977, "Acc.glomeruli": 0.8781}
{"mode": "train", "epoch": 8, "iter": 1850, "lr": 0.00058, "memory": 18259, "data_time": 0.47202, "decode.loss_ce": 0.01065, "decode.acc_seg": 99.63712, "aux.loss_ce": 0.008, "aux.acc_seg": 99.35407, "loss": 0.01865, "time": 0.98353}
{"mode": "train", "epoch": 8, "iter": 1900, "lr": 0.00043, "memory": 18259, "data_time": 0.00535, "decode.loss_ce": 0.0111, "decode.acc_seg": 99.59049, "aux.loss_ce": 0.00791, "aux.acc_seg": 99.32057, "loss": 0.01901, "time": 0.51746}
{"mode": "train", "epoch": 8, "iter": 1950, "lr": 0.00028, "memory": 18259, "data_time": 0.00541, "decode.loss_ce": 0.01332, "decode.acc_seg": 99.50331, "aux.loss_ce": 0.00873, "aux.acc_seg": 99.18429, "loss": 0.02205, "time": 0.51771}
{"mode": "train", "epoch": 8, "iter": 2000, "lr": 0.00011, "memory": 18259, "data_time": 0.00545, "decode.loss_ce": 0.01157, "decode.acc_seg": 99.6039, "aux.loss_ce": 0.00817, "aux.acc_seg": 99.32041, "loss": 0.01974, "time": 0.53053}
{"mode": "val", "epoch": 8, "iter": 515, "lr": 0.00011, "aAcc": 0.9957, "mIoU": 0.8933, "mAcc": 0.9306, "IoU.background": 0.9956, "IoU.glomeruli": 0.791, "Acc.background": 0.9982, "Acc.glomeruli": 0.863}
